package notifications

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"time"

	"minapp-backend/internal/config"
	"minapp-backend/internal/telegram"
)

type NotificationService struct {
	bot *telegram.Bot
	cfg *config.Config
}

func NewNotificationService(bot *telegram.Bot, cfg *config.Config) *NotificationService {
	return &NotificationService{
		bot: bot,
		cfg: cfg,
	}
}

// SendDailyReminder sends a daily reminder to check if user has added transactions
func (ns *NotificationService) SendDailyReminder(chatID int64) error {
	// Check if user has any transactions today
	today := time.Now().Format("2006-01-02")
	url := ns.cfg.FMPCoreAPIURL + "/api/v1/transactions?start_date=" + today + "&end_date=" + today

	// Make API request to check transactions
	client := &http.Client{Timeout: 30 * time.Second}
	resp, err := client.Get(url)
	if err != nil {
		return fmt.Errorf("failed to check transactions: %w", err)
	}
	defer resp.Body.Close()

	// Parse response to check if there are transactions
	var transactions []interface{}
	if err := json.NewDecoder(resp.Body).Decode(&transactions); err != nil {
		return fmt.Errorf("failed to parse transactions response: %w", err)
	}

	if len(transactions) == 0 {
		message := ns.generateReminderMessage()
		if err := ns.bot.SendMessage(chatID, message); err != nil {
			return fmt.Errorf("failed to send reminder: %w", err)
		}
		log.Printf("Daily reminder sent to chat %d", chatID)
	}

	return nil
}

// SendLimitWarning sends a warning when category limit is approaching
func (ns *NotificationService) SendLimitWarning(chatID int64, categoryName string, currentAmount, limitAmount float64) error {
	percentage := (currentAmount / limitAmount) * 100

	var message string
	if percentage >= 100 {
		message = fmt.Sprintf("üö® –õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω!\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: %.2f ‚ÇΩ\n–õ–∏–º–∏—Ç: %.2f ‚ÇΩ\n–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ: %.2f ‚ÇΩ",
			categoryName, currentAmount, limitAmount, currentAmount-limitAmount)
	} else if percentage >= 80 {
		message = fmt.Sprintf("‚ö†Ô∏è –ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ –ª–∏–º–∏—Ç—É!\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: %.2f ‚ÇΩ (%.1f%%)\n–õ–∏–º–∏—Ç: %.2f ‚ÇΩ\n–û—Å—Ç–∞–ª–æ—Å—å: %.2f ‚ÇΩ",
			categoryName, currentAmount, percentage, limitAmount, limitAmount-currentAmount)
	} else {
		return nil // No warning needed
	}

	if err := ns.bot.SendMessage(chatID, message); err != nil {
		return fmt.Errorf("failed to send limit warning: %w", err)
	}

	log.Printf("Limit warning sent to chat %d for category %s", chatID, categoryName)
	return nil
}

// SendPlannedExpenseReminder sends a reminder about upcoming planned expenses
func (ns *NotificationService) SendPlannedExpenseReminder(chatID int64, expenseName string, plannedDate time.Time, amount float64) error {
	daysUntil := int(time.Until(plannedDate).Hours() / 24)

	var message string
	if daysUntil == 0 {
		message = fmt.Sprintf("üìÖ –°–µ–≥–æ–¥–Ω—è –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã–π —Ä–∞—Å—Ö–æ–¥!\n\n%s\n–°—É–º–º–∞: %.2f ‚ÇΩ", expenseName, amount)
	} else if daysUntil == 1 {
		message = fmt.Sprintf("üìÖ –ó–∞–≤—Ç—Ä–∞ –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã–π —Ä–∞—Å—Ö–æ–¥!\n\n%s\n–°—É–º–º–∞: %.2f ‚ÇΩ", expenseName, amount)
	} else if daysUntil <= 3 {
		message = fmt.Sprintf("üìÖ –ß–µ—Ä–µ–∑ %d –¥–Ω—è –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã–π —Ä–∞—Å—Ö–æ–¥!\n\n%s\n–°—É–º–º–∞: %.2f ‚ÇΩ", daysUntil, expenseName, amount)
	} else {
		return nil // Too far in the future
	}

	if err := ns.bot.SendMessage(chatID, message); err != nil {
		return fmt.Errorf("failed to send planned expense reminder: %w", err)
	}

	log.Printf("Planned expense reminder sent to chat %d for %s", chatID, expenseName)
	return nil
}

// SendIncomeCopyNotification sends notification when income is copied from previous month
func (ns *NotificationService) SendIncomeCopyNotification(chatID int64, month int, year int, amount float64) error {
	monthNames := []string{
		"–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
		"–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å",
	}

	message := fmt.Sprintf("üìã –î–æ—Ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!\n\n–ú–µ—Å—è—Ü: %s %d\n–°—É–º–º–∞: %.2f ‚ÇΩ\n\n–î–æ—Ö–æ–¥ –±—ã–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ.",
		monthNames[month-1], year, amount)

	if err := ns.bot.SendMessage(chatID, message); err != nil {
		return fmt.Errorf("failed to send income copy notification: %w", err)
	}

	log.Printf("Income copy notification sent to chat %d for %s %d", chatID, monthNames[month-1], year)
	return nil
}

func (ns *NotificationService) generateReminderMessage() string {
	memes := []string{
		"üò¥", "ü§î", "üí≠", "üìù", "üí∞", "‚è∞", "üì±", "üéØ",
	}

	messages := []string{
		"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n–°–µ–≥–æ–¥–Ω—è –≤—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã! üí∞\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç.",
		"–≠–π! –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ —É—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤! üìä\n\n–°–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π. –ë—ã—Å—Ç—Ä–æ –¥–æ–±–∞–≤—å—Ç–µ —Ç—Ä–∞—Ç—ã —á–µ—Ä–µ–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!",
		"–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —É—á–µ—Ç–∞! üìà\n\n–î–æ–±–∞–≤—å—Ç–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.",
		"–î–µ–Ω—å–≥–∏ –ª—é–±—è—Ç —Å—á–µ—Ç! üí∏\n\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Ç—Ä–∞—Ç—ã —á–µ—Ä–µ–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.",
		"–£—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ - –æ—Å–Ω–æ–≤–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è! üí™\n\n–î–æ–±–∞–≤—å—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.",
		"–ú–∞–ª–µ–Ω—å–∫–∏–µ —Ç—Ä–∞—Ç—ã —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –≤ –±–æ–ª—å—à–∏–µ —Å—É–º–º—ã! üîç\n\n–ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ —Å–µ–≥–æ–¥–Ω—è.",
	}

	meme := memes[time.Now().Unix()%int64(len(memes))]
	message := messages[time.Now().Unix()%int64(len(messages))]

	return fmt.Sprintf("%s %s", meme, message)
}
