version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: fmp-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-fmp_db}
      POSTGRES_USER: ${POSTGRES_USER:-fmp_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev_password_123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./fmp-core/migrations:/docker-entrypoint-initdb.d
    networks:
      - fmp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-fmp_user} -d ${POSTGRES_DB:-fmp_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: fmp-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - fmp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FMP Core API
  fmp-core:
    build:
      context: ./fmp-core
      dockerfile: Dockerfile
    container_name: fmp-core-api
    environment:
      - DB_HOST=${DB_HOST:-postgres}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-fmp_db}
      - DB_USER=${DB_USER:-fmp_user}
      - DB_PASSWORD=${DB_PASSWORD:-dev_password_123}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - API_PORT=${API_PORT:-8080}
      - GIN_MODE=${GIN_MODE:-release}
      - API_SECRET_KEY=${API_SECRET_KEY:-dev-secret-key-for-local-development-only-32-chars}
      - JWT_SECRET=${JWT_SECRET:-dev-jwt-secret-for-local-development-only-32-chars}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-24h}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3000,http://localhost:3001}
      - RATE_LIMIT_REQUESTS=${RATE_LIMIT_REQUESTS:-100}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-1h}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - fmp-network
    volumes:
      - ./fmp-core:/app
    restart: unless-stopped

  # Mini App Backend
  minapp-backend:
    build:
      context: ./minapp/backend
      dockerfile: Dockerfile
    container_name: fmp-minapp-backend
    environment:
      - FMP_CORE_URL=${FMP_CORE_URL:-http://fmp-core:8080/api/v1}
      - PORT=${PORT:-8081}
      - GIN_MODE=${GIN_MODE:-release}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-}
      - TELEGRAM_WEBHOOK_URL=${TELEGRAM_WEBHOOK_URL:-}
    ports:
      - "8081:8081"
    depends_on:
      - fmp-core
    networks:
      - fmp-network
    volumes:
      - ./minapp/backend:/app
    restart: unless-stopped

  # Mini App Frontend
  minapp-frontend:
    build:
      context: ./minapp/frontend
      dockerfile: Dockerfile
    container_name: fmp-minapp-frontend
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8080/api/v1}
      - REACT_APP_MINAPP_BACKEND_URL=${REACT_APP_MINAPP_BACKEND_URL:-http://localhost:8081}
      - REACT_APP_TELEGRAM_BOT_USERNAME=${REACT_APP_TELEGRAM_BOT_USERNAME:-}
      - REACT_APP_ENVIRONMENT=${REACT_APP_ENVIRONMENT:-development}
    ports:
      - "3000:3000"
    depends_on:
      - fmp-core
      - minapp-backend
    networks:
      - fmp-network
    volumes:
      - ./minapp/frontend:/app
      - /app/node_modules
    restart: unless-stopped

  # Analytics Dashboard
  fmp-analytics:
    build:
      context: ./fmp-analytics
      dockerfile: Dockerfile
    container_name: fmp-analytics
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8080/api/v1}
      - REACT_APP_ENVIRONMENT=${REACT_APP_ENVIRONMENT:-development}
      - REACT_APP_ANALYTICS_API_KEY=${REACT_APP_ANALYTICS_API_KEY:-}
    ports:
      - "3001:3000"
    depends_on:
      - fmp-core
    networks:
      - fmp-network
    volumes:
      - ./fmp-analytics:/app
      - /app/node_modules
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: fmp-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deploy/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - fmp-core
      - minapp-backend
      - minapp-frontend
      - fmp-analytics
    networks:
      - fmp-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  fmp-network:
    driver: bridge
